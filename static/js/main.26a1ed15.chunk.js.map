{"version":3,"sources":["utils/conversions.js","contracts/marketplace_approval.teal","contracts/marketplace_clear.teal","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/marketplace/AddProduct.jsx","components/marketplace/Product.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/marketplace/Products.jsx","assets/img/sandwich.jpg","App.js","reportWebVitals.js","index.js","utils/marketplace.js","utils/constants.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddProduct","createProduct","useState","setName","image","setImage","description","setDescription","startingPrice","setStartingPrice","instantPrice","setInstantPrice","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","value","onChange","e","placeholder","Footer","disabled","Product","product","bidLand","buyLand","endAuction","currentBid","currentBidder","ended","endAt","appId","seller","date","Date","getTime","newBid","setNewBid","Col","Card","Badge","bg","objectFit","Text","Group","Label","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","Products","fetchBalance","products","setProducts","loading","setLoading","getProducts","a","getProductsAction","then","catch","error","console","log","finally","_","useEffect","data","createProductAction","toast","buyProduct","buyProductAction","bidLandAction","endAuctionAction","deleteProduct","deleteProductAction","Row","xs","sm","lg","map","index","App","setAddress","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","do","response","_balance","account","connectWallet","myAlgoConnect","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","marketplaceNote","algosdk","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","getApplicationAddress","txId2","signedTxn2","buyArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","txnArray","groupID","computeGroupID","i","group","tx","bidArg","endArg","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint","encodeAddress","Base64","toUint8Array","config","Algodv2","Indexer","MyAlgoConnect"],"mappings":"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","file":"static/js/main.26a1ed15.chunk.js","sourcesContent":["import {ALGORAND_DECIMALS} from \"./constants\";\r\nimport BigNumber from \"bignumber.js\";\r\n\r\nexport const base64ToUTF8String = (base64String) => {\r\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\r\n}\r\n\r\nexport const utf8ToBase64String = (utf8String) => {\r\n    return Buffer.from(utf8String, 'utf8').toString('base64')\r\n}\r\n\r\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\r\n}\r\n\r\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\r\nexport const microAlgosToString = (num) => {\r\n    if (!num) return\r\n    let bigNumber = new BigNumber(num)\r\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\r\n}\r\n\r\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\r\nexport const stringToMicroAlgos = (str) => {\r\n    if (!str) return\r\n    let bigNumber = new BigNumber(str)\r\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\r\n}","export default \"#pragma version 6\\r\\ntxn ApplicationID\\r\\nint 0\\r\\n==\\r\\nbnz main_l18\\r\\ntxn OnCompletion\\r\\nint DeleteApplication\\r\\n==\\r\\nbnz main_l17\\r\\ntxna ApplicationArgs 0\\r\\nbyte \\\"buy\\\"\\r\\n==\\r\\nbnz main_l12\\r\\ntxna ApplicationArgs 0\\r\\nbyte \\\"bid\\\"\\r\\n==\\r\\nbnz main_l9\\r\\ntxna ApplicationArgs 0\\r\\nbyte \\\"end\\\"\\r\\n==\\r\\nbnz main_l6\\r\\nerr\\r\\nmain_l6:\\r\\ntxn Sender\\r\\nglobal CreatorAddress\\r\\n==\\r\\nbyte \\\"ENDED\\\"\\r\\napp_global_get\\r\\nint 0\\r\\n==\\r\\n&&\\r\\nbyte \\\"ENDAT\\\"\\r\\napp_global_get\\r\\nglobal LatestTimestamp\\r\\n<\\r\\n&&\\r\\nassert\\r\\nbyte \\\"CURRENTBID\\\"\\r\\napp_global_get\\r\\nbyte \\\"STARTINGPRICE\\\"\\r\\napp_global_get\\r\\n>=\\r\\nbnz main_l8\\r\\nmain_l7:\\r\\nbyte \\\"ENDED\\\"\\r\\nint 1\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\nmain_l8:\\r\\ntxna Accounts 0\\r\\nbyte \\\"CURRENTBID\\\"\\r\\napp_global_get\\r\\ncallsub payUser_0\\r\\nb main_l7\\r\\nmain_l9:\\r\\nglobal GroupSize\\r\\nint 2\\r\\n==\\r\\ngtxn 1 TypeEnum\\r\\nint pay\\r\\n==\\r\\ngtxn 1 Receiver\\r\\nglobal CurrentApplicationAddress\\r\\n==\\r\\n&&\\r\\ngtxn 1 Sender\\r\\ngtxn 0 Sender\\r\\n==\\r\\n&&\\r\\n&&\\r\\ngtxn 0 Sender\\r\\nglobal CreatorAddress\\r\\n!=\\r\\nbyte \\\"ENDED\\\"\\r\\napp_global_get\\r\\nint 0\\r\\n==\\r\\n&&\\r\\nbyte \\\"ENDAT\\\"\\r\\napp_global_get\\r\\nglobal LatestTimestamp\\r\\n>\\r\\n&&\\r\\nbyte \\\"CURRENTBIDDER\\\"\\r\\napp_global_get\\r\\ngtxn 0 Sender\\r\\n!=\\r\\n&&\\r\\nbyte \\\"STARTINGPRICE\\\"\\r\\napp_global_get\\r\\ngtxn 1 Amount\\r\\n<=\\r\\n&&\\r\\nbyte \\\"CURRENTBID\\\"\\r\\napp_global_get\\r\\ngtxn 1 Amount\\r\\n<\\r\\n&&\\r\\n&&\\r\\nassert\\r\\nbyte \\\"CURRENTBIDDER\\\"\\r\\napp_global_get\\r\\nglobal CreatorAddress\\r\\n!=\\r\\nbnz main_l11\\r\\nmain_l10:\\r\\nbyte \\\"CURRENTBIDDER\\\"\\r\\ngtxn 0 Sender\\r\\napp_global_put\\r\\nbyte \\\"CURRENTBID\\\"\\r\\ngtxn 1 Amount\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\nmain_l11:\\r\\nbyte \\\"CURRENTBIDDER\\\"\\r\\napp_global_get\\r\\nbyte \\\"CURRENTBID\\\"\\r\\napp_global_get\\r\\ncallsub payUser_0\\r\\nb main_l10\\r\\nmain_l12:\\r\\nglobal GroupSize\\r\\nint 2\\r\\n==\\r\\ngtxn 1 TypeEnum\\r\\nint pay\\r\\n==\\r\\ngtxn 1 Receiver\\r\\nglobal CreatorAddress\\r\\n==\\r\\n&&\\r\\ngtxn 1 Sender\\r\\ngtxn 0 Sender\\r\\n==\\r\\n&&\\r\\ngtxn 1 Amount\\r\\nbyte \\\"INSTANTPRICE\\\"\\r\\napp_global_get\\r\\n==\\r\\n&&\\r\\n&&\\r\\ngtxn 0 Sender\\r\\nglobal CreatorAddress\\r\\n!=\\r\\nbyte \\\"ENDED\\\"\\r\\napp_global_get\\r\\nint 0\\r\\n==\\r\\n&&\\r\\nbyte \\\"ENDAT\\\"\\r\\napp_global_get\\r\\nglobal LatestTimestamp\\r\\n>\\r\\n&&\\r\\nbyte \\\"CURRENTBID\\\"\\r\\napp_global_get\\r\\nbyte \\\"INSTANTPRICE\\\"\\r\\napp_global_get\\r\\n<\\r\\n&&\\r\\n&&\\r\\nbnz main_l14\\r\\nint 0\\r\\nreturn\\r\\nmain_l14:\\r\\nbyte \\\"CURRENTBIDDER\\\"\\r\\napp_global_get\\r\\nglobal CreatorAddress\\r\\n!=\\r\\nbnz main_l16\\r\\nmain_l15:\\r\\nglobal CurrentApplicationAddress\\r\\nbalance\\r\\nglobal CurrentApplicationAddress\\r\\nmin_balance\\r\\n-\\r\\nstore 0\\r\\nglobal CreatorAddress\\r\\nload 0\\r\\ncallsub payUser_0\\r\\nbyte \\\"CURRENTBIDDER\\\"\\r\\ngtxn 0 Sender\\r\\napp_global_put\\r\\nbyte \\\"CURRENTBID\\\"\\r\\ngtxn 1 Amount\\r\\napp_global_put\\r\\nbyte \\\"ENDED\\\"\\r\\nint 1\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\nmain_l16:\\r\\nbyte \\\"CURRENTBIDDER\\\"\\r\\napp_global_get\\r\\nbyte \\\"CURRENTBID\\\"\\r\\napp_global_get\\r\\ncallsub payUser_0\\r\\nb main_l15\\r\\nmain_l17:\\r\\ntxn Sender\\r\\nglobal CreatorAddress\\r\\n==\\r\\nreturn\\r\\nmain_l18:\\r\\ntxn NumAppArgs\\r\\nint 5\\r\\n==\\r\\ntxn Note\\r\\nbyte \\\"aucspace:uv1\\\"\\r\\n==\\r\\n&&\\r\\ntxna ApplicationArgs 0\\r\\nlen\\r\\nint 0\\r\\n>\\r\\n&&\\r\\ntxna ApplicationArgs 1\\r\\nlen\\r\\nint 0\\r\\n>\\r\\n&&\\r\\ntxna ApplicationArgs 2\\r\\nlen\\r\\nint 0\\r\\n>\\r\\n&&\\r\\ntxna ApplicationArgs 3\\r\\nbtoi\\r\\nint 0\\r\\n>\\r\\n&&\\r\\ntxna ApplicationArgs 4\\r\\nbtoi\\r\\nint 0\\r\\n>\\r\\n&&\\r\\ntxna ApplicationArgs 4\\r\\nbtoi\\r\\ntxna ApplicationArgs 3\\r\\nbtoi\\r\\n>\\r\\n&&\\r\\nassert\\r\\nbyte \\\"NAME\\\"\\r\\ntxna ApplicationArgs 0\\r\\napp_global_put\\r\\nbyte \\\"IMAGE\\\"\\r\\ntxna ApplicationArgs 1\\r\\napp_global_put\\r\\nbyte \\\"DESCRIPTION\\\"\\r\\ntxna ApplicationArgs 2\\r\\napp_global_put\\r\\nbyte \\\"STARTINGPRICE\\\"\\r\\ntxna ApplicationArgs 3\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"INSTANTPRICE\\\"\\r\\ntxna ApplicationArgs 4\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"CURRENTBID\\\"\\r\\nint 0\\r\\napp_global_put\\r\\nbyte \\\"CURRENTBIDDER\\\"\\r\\ntxn Sender\\r\\napp_global_put\\r\\nbyte \\\"ENDED\\\"\\r\\nint 0\\r\\napp_global_put\\r\\nbyte \\\"ENDAT\\\"\\r\\nglobal LatestTimestamp\\r\\nint 500\\r\\n+\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\n\\r\\n// payUser\\r\\npayUser_0:\\r\\nstore 2\\r\\nstore 1\\r\\nitxn_begin\\r\\nint pay\\r\\nitxn_field TypeEnum\\r\\nload 2\\r\\nglobal MinTxnFee\\r\\n-\\r\\nitxn_field Amount\\r\\nload 1\\r\\nitxn_field Receiver\\r\\nitxn_submit\\r\\nretsub\";","export default \"#pragma version 6\\r\\nint 1\\r\\nreturn\";","import React from 'react';\r\nimport {Button} from \"react-bootstrap\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cover = ({name, coverImg, connect}) => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\r\n            <div className=\"mt-auto text-light mb-5\">\r\n                <div\r\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\r\n                    style={{maxWidth: \"320px\"}}\r\n                >\r\n                    <img src={coverImg} alt=\"\"/>\r\n                </div>\r\n                <h1>{name}</h1>\r\n                <p>Please connect your wallet to continue.</p>\r\n                <Button\r\n                    onClick={() => connect()}\r\n                    variant=\"outline-light\"\r\n                    className=\"rounded-pill px-3 mt-3\"\r\n                >\r\n                    Connect Wallet\r\n                </Button>\r\n            </div>\r\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nCover.propTypes = {\r\n    name: PropTypes.string,\r\n    coverImg: PropTypes.string,\r\n    connect: PropTypes.func\r\n};\r\n\r\nexport default Cover;\r\n","import Jazzicon from \"react-jazzicon\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Identicon = ({size, address, ...rest}) => (\r\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\r\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)}/>\r\n    </div>\r\n);\r\n\r\nIdenticon.propTypes = {\r\n    size: PropTypes.number.isRequired,\r\n    address: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Identicon;","import React from 'react';\r\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\r\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\r\nimport Identicon from './utils/Identicon'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\r\n    if (!address) {\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\r\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\r\n                    {amount ? (\r\n                        <>\r\n                            {microAlgosToString(amount)}\r\n                            <span className=\"ms-1\"> {symbol}</span>\r\n                        </>\r\n                    ) : (\r\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\r\n                    )}\r\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu className=\"shadow-lg border-0\">\r\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\r\n                                   target=\"_blank\">\r\n                        <Stack direction=\"horizontal\" gap={2}>\r\n                            <i className=\"bi bi-person-circle fs-4\"/>\r\n                            <div className=\"d-flex flex-column\">\r\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\r\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\r\n                            </div>\r\n                        </Stack>\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Divider/>\r\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\r\n                        disconnect();\r\n                    }}>\r\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\r\n                        Disconnect\r\n                    </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        </>\r\n    )\r\n};\r\n\r\nWallet.propTypes = {\r\n    address: PropTypes.string,\r\n    name: PropTypes.string,\r\n    amount: PropTypes.number,\r\n    symbol: PropTypes.string,\r\n    disconnect: PropTypes.func\r\n};\r\n\r\nexport default Wallet;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\r\n\r\nconst AddProduct = ({ createProduct }) => {\r\n\tconst [name, setName] = useState(\"Villa One\");\r\n\tconst [image, setImage] = useState(\"https://www.captamarin.mu/wp-content/uploads/2019/12/villas-aloes-cap-tamarin-exterieur.jpg\");\r\n\tconst [description, setDescription] = useState(\"Description\");\r\n\tconst [startingPrice, setStartingPrice] = useState(\"\");\r\n\tconst [instantPrice, setInstantPrice] = useState(\"\");\r\n\r\n\tconst isFormFilled = useCallback(() => {\r\n\t\treturn name && image && description && startingPrice && instantPrice;\r\n\t}, [\r\n\t\tname,\r\n\t\timage,\r\n\t\tdescription,\r\n\t\tstartingPrice,\r\n\t\tinstantPrice\r\n\t]);\r\n\r\n\tconst [show, setShow] = useState(false);\r\n\r\n\tconst handleClose = () => setShow(false);\r\n\tconst handleShow = () => setShow(true);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Button\r\n\t\t\t\tonClick={handleShow}\r\n\t\t\t\tvariant=\"dark\"\r\n\t\t\t\tclassName=\"rounded-pill px-0\"\r\n\t\t\t\tstyle={{ width: \"38px\" }}\r\n\t\t\t>\r\n\t\t\t\t<i className=\"bi bi-plus\"></i>\r\n\t\t\t</Button>\r\n\t\t\t<Modal show={show} onHide={handleClose} centered>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title>New Land</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t\t<FloatingLabel\r\n\t\t\t\t\t\t\tcontrolId=\"inputName\"\r\n\t\t\t\t\t\t\tlabel=\"Land/Home name\"\r\n\t\t\t\t\t\t\tclassName=\"mb-3\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tvalue={name}\r\n\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\tsetName(e.target.value);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter name of land/home\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t<FloatingLabel\r\n\t\t\t\t\t\t\tcontrolId=\"inputUrl\"\r\n\t\t\t\t\t\t\tlabel=\"Image URL\"\r\n\t\t\t\t\t\t\tclassName=\"mb-3\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Image URL\"\r\n\t\t\t\t\t\t\t\tvalue={image}\r\n\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\tsetImage(e.target.value);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t<FloatingLabel\r\n\t\t\t\t\t\t\tcontrolId=\"inputDescription\"\r\n\t\t\t\t\t\t\tlabel=\"Description\"\r\n\t\t\t\t\t\t\tclassName=\"mb-3\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\tas=\"textarea\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"description\"\r\n\t\t\t\t\t\t\t\tstyle={{ height: \"80px\" }}\r\n\t\t\t\t\t\t\t\tvalue={description}\r\n\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\tsetDescription(e.target.value);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t<FloatingLabel\r\n\t\t\t\t\t\t\tcontrolId=\"inputInstantPrice\"\r\n\t\t\t\t\t\t\tlabel=\"Instant Price\"\r\n\t\t\t\t\t\t\tclassName=\"mb-3\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Instant price\"\r\n\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\tsetInstantPrice(\r\n\t\t\t\t\t\t\t\t\t\tstringToMicroAlgos(e.target.value)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t\t<FloatingLabel\r\n\t\t\t\t\t\t\tcontrolId=\"inputStartingPrice\"\r\n\t\t\t\t\t\t\tlabel=\"Starting Price\"\r\n\t\t\t\t\t\t\tclassName=\"mb-3\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Starting price\"\r\n\t\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\t\tsetStartingPrice(\r\n\t\t\t\t\t\t\t\t\t\tstringToMicroAlgos(e.target.value)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</FloatingLabel>\r\n\t\t\t\t\t</Modal.Body>\r\n\t\t\t\t</Form>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<Button variant=\"outline-secondary\" onClick={handleClose}>\r\n\t\t\t\t\t\tClose\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant=\"dark\"\r\n\t\t\t\t\t\tdisabled={!isFormFilled()}\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tcreateProduct({\r\n                                name,\r\n                                image,\r\n                                description,\r\n                                startingPrice,\r\n                                instantPrice\r\n                            })\r\n\t\t\t\t\t\t\thandleClose();\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSave Land\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nAddProduct.propTypes = {\r\n\tcreateProduct: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddProduct;\r\n","import React, { useState } from \"react\";\r\nimport { Card, Button, Col, Badge, Stack, Form } from \"react-bootstrap\";\r\nimport {\r\n\tmicroAlgosToString,\r\n\tstringToMicroAlgos,\r\n\ttruncateAddress,\r\n} from \"../../utils/conversions\";\r\nimport Identicon from \"../utils/Identicon\";\r\n\r\nconst Product = ({\r\n\taddress,\r\n\tproduct,\r\n\tbidLand,\r\n\tbuyLand,\r\n\tendAuction\r\n}) => {\r\n\tconst {\r\n\t\tname,\r\n\t\timage,\r\n\t\tdescription,\r\n\t\tinstantPrice,\r\n\t\tstartingPrice,\r\n\t\tcurrentBid,\r\n\t\tcurrentBidder,\r\n\t\tended,\r\n\t\tendAt,\r\n\t\tappId,\r\n\t\tseller,\r\n\t} = product;\r\n\tlet date = new Date().getTime() / 1000;\r\n\tconst [newBid, setNewBid] = useState(\"\");\r\n\treturn (\r\n\t\t<Col key={appId}>\r\n\t\t\t<Card className=\" h-100\">\r\n\t\t\t\t<Card.Header>\r\n\t\t\t\t\t<Stack direction=\"horizontal\" gap={2}>\r\n\t\t\t\t\t\t<Identicon size={28} address={seller} />\r\n\t\t\t\t\t\t<Badge bg=\"secondary\" className=\"ms-auto\">\r\n\t\t\t\t\t\t\t{ended ? \"Not Available\" : \"Available\"}\r\n\t\t\t\t\t\t</Badge>\r\n\t\t\t\t\t</Stack>\r\n\t\t\t\t</Card.Header>\r\n\t\t\t\t<div className=\" ratio ratio-4x3\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc={image}\r\n\t\t\t\t\t\talt={name}\r\n\t\t\t\t\t\tstyle={{ objectFit: \"cover\" }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Card.Body className=\"d-flex  flex-column text-center\">\r\n\t\t\t\t\t<Card.Title>{name}</Card.Title>\r\n\t\t\t\t\t<Card.Text className=\"flex-grow-1 \">\r\n\t\t\t\t\t\t{description}\r\n\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t<Card.Text className=\"text-secondary\">\r\n\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\tstartingPrice is {microAlgosToString(startingPrice)}{\" \"}\r\n\t\t\t\t\t\t\tALGO\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t{!ended &&\r\n\t\t\t\t\taddress !== seller &&\r\n\t\t\t\t\taddress !== currentBidder &&\r\n\t\t\t\t\tendAt > date ? (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"BidAmount\">\r\n\t\t\t\t\t\t\t\t<Form.Label>\r\n\t\t\t\t\t\t\t\t\tEnter Bid(current bid is{\" \"}\r\n\t\t\t\t\t\t\t\t\t{microAlgosToString(currentBid)} ALGO) by{\" \"}\r\n\t\t\t\t\t\t\t\t\t{truncateAddress(currentBidder)}\r\n\t\t\t\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Enter bid amount\"\r\n\t\t\t\t\t\t\t\t\tvalue={newBid}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\r\n\t\t\t\t\t\t\t\t\t\tsetNewBid(\r\n\t\t\t\t\t\t\t\t\t\t\te.target.value\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"outline-success\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => bidLand(product, stringToMicroAlgos(newBid))}\r\n\t\t\t\t\t\t\t\t\tclassName=\"mt-2 px-5\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tBid(ends at {(endAt - date) / 60} minutes)\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"outline-dark\"\r\n\t\t\t\t\t\t\t\tonClick={() => buyLand(product)}\r\n\t\t\t\t\t\t\t\tclassName=\"w-100 py-3\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tBuy Instantly for{\" \"}\r\n\t\t\t\t\t\t\t\t{microAlgosToString(instantPrice)} ALGO\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<Card.Text>Current Bid is {currentBid} by {truncateAddress(currentBidder)}</Card.Text>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{address === seller && !ended && endAt < date ? (\r\n\t\t\t\t\t\t<Button variant=\"danger\" onClick={() => endAuction(product)}>\r\n\t\t\t\t\t\t\tEnd Auction\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\"\"\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{currentBidder !== \"\" && ended ? (\r\n\t\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t\t\tWinner of the auction is{\" \"}\r\n\t\t\t\t\t\t\t{truncateAddress(currentBidder)}\r\n\t\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\"\"\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Card.Body>\r\n\t\t\t</Card>\r\n\t\t</Col>\r\n\t);\r\n};\r\n\r\nexport default Product;\r\n","import React from \"react\";\r\nimport {Spinner} from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n    <div className=\"d-flex justify-content-center\">\r\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n    </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = () => (\r\n    <ToastContainer\r\n        position=\"bottom-center\"\r\n        autoClose={5000}\r\n        hideProgressBar\r\n        newestOnTop\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable={false}\r\n        pauseOnHover\r\n    />\r\n);\r\n\r\nconst NotificationSuccess = ({text}) => (\r\n    <div>\r\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\r\n        <span className=\"text-secondary mx-1\">{text}</span>\r\n    </div>\r\n);\r\n\r\nconst NotificationError = ({text}) => (\r\n    <div>\r\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\r\n        <span className=\"text-secondary mx-1\">{text}</span>\r\n    </div>\r\n);\r\n\r\nconst Props = {\r\n    text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n    text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport {Notification, NotificationSuccess, NotificationError};\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {toast} from \"react-toastify\";\r\nimport AddProduct from \"./AddProduct\";\r\nimport Product from \"./Product\";\r\nimport Loader from \"../utils/Loader\";\r\nimport {NotificationError, NotificationSuccess} from \"../utils/Notifications\";\r\nimport {buyProductAction, bidLandAction, endAuctionAction, createProductAction, deleteProductAction, getProductsAction,} from \"../../utils/marketplace\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Row} from \"react-bootstrap\";\r\n\r\nconst Products = ({address, fetchBalance}) => {\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const getProducts = async () => {\r\n        setLoading(true);\r\n        getProductsAction(address)\r\n            .then(products => {\r\n                if (products) {\r\n                    setProducts(products);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n            .finally(_ => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getProducts();\r\n    }, []);\r\n\r\n    const createProduct = async (data) => {\r\n        setLoading(true);\r\n        createProductAction(address, data)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Product added successfully.\"/>);\r\n                getProducts();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                toast(<NotificationError text=\"Failed to create a product.\"/>);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    const buyProduct = async (product) => {\r\n        setLoading(true);\r\n        buyProductAction(address, product)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Land bought successfully\"/>);\r\n                getProducts();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast(<NotificationError text=\"Failed to purchase Land.\"/>);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    const bidLand = async (product, newBid) => {\r\n        setLoading(true);\r\n        bidLandAction(address, product, newBid)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Bidded on Land successfully\"/>);\r\n                getProducts();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast(<NotificationError text=\"Failed to bid on Land.\"/>);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    const endAuction = async (product) => {\r\n        setLoading(true);\r\n        endAuctionAction(address, product)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Auction ended successfully\"/>);\r\n                getProducts();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast(<NotificationError text=\"Failed to end auction for Land.\"/>);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    const deleteProduct = async (product) => {\r\n        setLoading(true);\r\n        deleteProductAction(address, product.appId)\r\n            .then(() => {\r\n                toast(<NotificationSuccess text=\"Product deleted successfully\"/>);\r\n                getProducts();\r\n                fetchBalance(address);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                toast(<NotificationError text=\"Failed to delete product.\"/>);\r\n                setLoading(false);\r\n            })\r\n    };\r\n\r\n    if (loading) {\r\n        return <Loader/>;\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                <h1 className=\"fs-4 fw-bold mb-0\">LandSpace</h1>\r\n                <AddProduct createProduct={createProduct}/>\r\n            </div>\r\n            <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\r\n                <>\r\n                    {products.map((product, index) => (\r\n                        <Product\r\n                            address={address}\r\n                            product={product}\r\n                            buyLand={buyProduct}\r\n                            bidLand={bidLand}\r\n                            endAuction={endAuction}\r\n                            deleteProduct={deleteProduct}\r\n                            key={index}\r\n                        />\r\n                    ))}\r\n                </>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nProducts.propTypes = {\r\n    address: PropTypes.string.isRequired,\r\n    fetchBalance: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Products;\r\n","export default __webpack_public_path__ + \"static/media/sandwich.2d312449.jpg\";","import React, {useState} from \"react\";\r\nimport Cover from \"./components/Cover\";\r\nimport './App.css';\r\nimport Wallet from \"./components/Wallet\";\r\nimport {Container, Nav} from \"react-bootstrap\";\r\nimport Products from \"./components/marketplace/Products\";\r\nimport {indexerClient, myAlgoConnect} from \"./utils/constants\";\r\nimport {Notification} from \"./components/utils/Notifications\";\r\nimport coverImg from \"./assets/img/sandwich.jpg\"\r\n\r\nconst App = function AppWrapper() {\r\n\r\n    const [address, setAddress] = useState(null);\r\n    const [name, setName] = useState(null);\r\n    const [balance, setBalance] = useState(0);\r\n\r\n    const fetchBalance = async (accountAddress) => {\r\n        indexerClient.lookupAccountByID(accountAddress).do()\r\n            .then(response => {\r\n                const _balance = response.account.amount;\r\n                setBalance(_balance);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    const connectWallet = async () => {\r\n        myAlgoConnect.connect()\r\n            .then(accounts => {\r\n                const _account = accounts[0];\r\n                setAddress(_account.address);\r\n                setName(_account.name);\r\n                fetchBalance(_account.address);\r\n            }).catch(error => {\r\n            console.log('Could not connect to MyAlgo wallet');\r\n            console.error(error);\r\n        })\r\n    };\r\n\r\n    const disconnect = () => {\r\n        setAddress(null);\r\n        setName(null);\r\n        setBalance(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Notification/>\r\n            {address ? (\r\n                <Container fluid=\"md\">\r\n                    <Nav className=\"justify-content-end pt-3 pb-5\">\r\n                        <Nav.Item>\r\n                            <Wallet\r\n                                address={address}\r\n                                name={name}\r\n                                amount={balance}\r\n                                disconnect={disconnect}\r\n                                symbol={\"ALGO\"}\r\n                            />\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                    <main>\r\n                        <Products address={address} fetchBalance={fetchBalance}/>\r\n                    </main>\r\n                </Container>\r\n            ) : (\r\n                <Cover name={\"LandSpace\"} coverImg={coverImg} connect={connectWallet}/>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap-icons/font/bootstrap-icons.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import algosdk from \"algosdk\";\r\nimport {\r\n\talgodClient,\r\n\tindexerClient,\r\n\tmarketplaceNote,\r\n\tminRound,\r\n\tmyAlgoConnect,\r\n\tnumGlobalBytes,\r\n\tnumGlobalInts,\r\n\tnumLocalBytes,\r\n\tnumLocalInts,\r\n} from \"./constants\";\r\nimport { Base64 } from \"js-base64\";\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nimport approvalProgram from \"!!raw-loader!../contracts/marketplace_approval.teal\";\r\nimport clearProgram from \"!!raw-loader!../contracts/marketplace_clear.teal\";\r\nimport { base64ToUTF8String, stringToMicroAlgos, utf8ToBase64String } from \"./conversions\";\r\n\r\nclass Product {\r\n\tconstructor(\r\n\t\tname,\r\n\t\timage,\r\n\t\tdescription,\r\n\t\tstartingPrice,\r\n\t\tinstantPrice,\r\n\t\tcurrentBid,\r\n\t\tcurrentBidder,\r\n\t\tended,\r\n\t\tendAt,\r\n\t\tappId,\r\n\t\tseller\r\n\t) {\r\n\t\tthis.name = name;\r\n\t\tthis.image = image;\r\n\t\tthis.description = description;\r\n\t\tthis.startingPrice = startingPrice;\r\n\t\tthis.instantPrice = instantPrice;\r\n\t\tthis.currentBid = currentBid;\r\n\t\tthis.currentBidder = currentBidder;\r\n\t\tthis.ended = ended;\r\n\t\tthis.endAt = endAt;\r\n\t\tthis.appId = appId;\r\n\t\tthis.seller = seller;\r\n\t}\r\n}\r\n\r\n// Compile smart contract in .teal format to program\r\nconst compileProgram = async (programSource) => {\r\n\tlet encoder = new TextEncoder();\r\n\tlet programBytes = encoder.encode(programSource);\r\n\tlet compileResponse = await algodClient.compile(programBytes).do();\r\n\treturn new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\r\n};\r\n\r\n\r\n// CREATE PRODUCT: ApplicationCreateTxn\r\nexport const createProductAction = async (senderAddress, product) => {\r\n\tconsole.log(\"Adding land...\", product);\r\n\r\n\tlet params = await algodClient.getTransactionParams().do();\r\n\r\n\t// Compile programs\r\n\tconst compiledApprovalProgram = await compileProgram(approvalProgram);\r\n\tconst compiledClearProgram = await compileProgram(clearProgram);\r\n\r\n\t// Build note to identify transaction later and required app args as Uint8Arrays\r\n\tlet note = new TextEncoder().encode(marketplaceNote);\r\n\tlet name = new TextEncoder().encode(product.name);\r\n\tlet image = new TextEncoder().encode(product.image);\r\n\tlet description = new TextEncoder().encode(product.description);\r\n\tlet startingPrice = algosdk.encodeUint64(product.startingPrice);\r\n\tlet instantPrice = algosdk.encodeUint64(product.instantPrice);\r\n\r\n\tlet appArgs = [name, image, description, startingPrice, instantPrice];\r\n\t// Create ApplicationCreateTxn\r\n\tlet txn = algosdk.makeApplicationCreateTxnFromObject({\r\n\t\tfrom: senderAddress,\r\n\t\tsuggestedParams: params,\r\n\t\tonComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n\t\tapprovalProgram: compiledApprovalProgram,\r\n\t\tclearProgram: compiledClearProgram,\r\n\t\tnumLocalInts: numLocalInts,\r\n\t\tnumLocalByteSlices: numLocalBytes,\r\n\t\tnumGlobalInts: numGlobalInts,\r\n\t\tnumGlobalByteSlices: numGlobalBytes,\r\n\t\tnote: note,\r\n\t\tappArgs: appArgs,\r\n\t});\r\n\r\n\t// Get transaction ID\r\n\tlet txId = txn.txID().toString();\r\n\r\n\t// Sign & submit the transaction\r\n\tlet signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n\tconsole.log(\"Signed transaction with txID: %s\", txId);\r\n\tawait algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n\tconsole.log(\"before confirmation\");\r\n\t// Wait for transaction to be confirmed\r\n\tlet confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n\t// Get the completed Transaction\r\n\tconsole.log(\r\n\t\t\"Transaction \" +\r\n\t\t\ttxId +\r\n\t\t\t\" confirmed in round \" +\r\n\t\t\tconfirmedTxn[\"confirmed-round\"]\r\n\t);\r\n\r\n\t// Get created application id and notify about completion\r\n\tlet transactionResponse = await algodClient\r\n\t\t.pendingTransactionInformation(txId)\r\n\t\t.do();\r\n\tlet appId = transactionResponse[\"application-index\"];\r\n\r\n\t// Create PaymentTxn\r\n\tlet paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n\t\tfrom: senderAddress,\r\n\t\tto: algosdk.getApplicationAddress(appId),\r\n\t\tamount: stringToMicroAlgos(\"2\"),\r\n\t\tsuggestedParams: params,\r\n\t});\r\n\r\n\t// Get transaction ID\r\n\tlet txId2 = paymentTxn.txID().toString();\r\n\r\n\t// Sign & submit the transaction\r\n\tlet signedTxn2 = await myAlgoConnect.signTransaction(paymentTxn.toByte());\r\n\tconsole.log(\"Signed transaction with txID: %s\", txId2);\r\n\tawait algodClient.sendRawTransaction(signedTxn2.blob).do();\r\n\r\n\tconsole.log(\"before confirmation\");\r\n\t// Wait for transaction to be confirmed\r\n\tlet confirmedTxn2 = await algosdk.waitForConfirmation(\r\n\t\talgodClient,\r\n\t\ttxId2,\r\n\t\t4\r\n\t);\r\n\tconsole.log(\"Created new app-id: \", appId);\r\n\treturn appId;\r\n};\r\n\r\n// Buy LAND: Group transaction consisting of ApplicationCallTxn and PaymentTxn\r\nexport const buyProductAction = async (senderAddress, product) => {\r\n\tconsole.log(\"Buying land...\");\r\n\tlet params = await algodClient.getTransactionParams().do();\r\n\r\n\t// Build required app args as Uint8Array\r\n\tlet buyArg = new TextEncoder().encode(\"buy\");\r\n\tlet appArgs = [buyArg];\r\n\tlet accounts = [product.currentBidder, product.seller];\r\n\r\n\t// Create ApplicationCallTxn\r\n\tlet appCallTxn = algosdk.makeApplicationCallTxnFromObject({\r\n\t\tfrom: senderAddress,\r\n\t\tappIndex: product.appId,\r\n\t\tonComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n\t\tsuggestedParams: params,\r\n\t\tappArgs: appArgs,\r\n\t\taccounts: accounts,\r\n\t});\r\n\r\n\t// Create PaymentTxn\r\n\tlet paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n\t\tfrom: senderAddress,\r\n\t\tto: product.seller,\r\n\t\tamount: product.instantPrice,\r\n\t\tsuggestedParams: params,\r\n\t});\r\n\r\n\tlet txnArray = [appCallTxn, paymentTxn];\r\n\r\n\t// Create group transaction out of previously build transactions\r\n\tlet groupID = algosdk.computeGroupID(txnArray);\r\n\tfor (let i = 0; i < 2; i++) txnArray[i].group = groupID;\r\n\r\n\t// Sign & submit the group transaction\r\n\tlet signedTxn = await myAlgoConnect.signTransaction(\r\n\t\ttxnArray.map((txn) => txn.toByte())\r\n\t);\r\n\tconsole.log(\"Signed group transaction\");\r\n\tlet tx = await algodClient\r\n\t\t.sendRawTransaction(signedTxn.map((txn) => txn.blob))\r\n\t\t.do();\r\n\r\n\t// Wait for group transaction to be confirmed\r\n\tlet confirmedTxn = await algosdk.waitForConfirmation(\r\n\t\talgodClient,\r\n\t\ttx.txId,\r\n\t\t4\r\n\t);\r\n\r\n\t// Notify about completion\r\n\tconsole.log(\r\n\t\t\"Group transaction \" +\r\n\t\t\ttx.txId +\r\n\t\t\t\" confirmed in round \" +\r\n\t\t\tconfirmedTxn[\"confirmed-round\"]\r\n\t);\r\n};\r\n\r\n// Bid LAND: Group transaction consisting of ApplicationCallTxn and PaymentTxn\r\nexport const bidLandAction = async (senderAddress, product, newBid) => {\r\n\tconsole.log(\"Bidding on product...\");\r\n\tlet params = await algodClient.getTransactionParams().do();\r\n\r\n\t// Build required app args as Uint8Array\r\n\tlet bidArg = new TextEncoder().encode(\"bid\");\r\n\tlet appArgs = [bidArg];\r\n\tlet accounts = [product.currentBidder];\r\n\t// Create ApplicationCallTxn\r\n\tlet appCallTxn = algosdk.makeApplicationCallTxnFromObject({\r\n\t\tfrom: senderAddress,\r\n\t\tappIndex: product.appId,\r\n\t\tonComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n\t\tsuggestedParams: params,\r\n\t\tappArgs: appArgs,\r\n\t\taccounts: accounts,\r\n\t});\r\n\r\n\t// Create PaymentTxn\r\n\tlet paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n\t\tfrom: senderAddress,\r\n\t\tto: algosdk.getApplicationAddress(product.appId),\r\n\t\tamount: newBid,\r\n\t\tsuggestedParams: params,\r\n\t});\r\n\r\n\tlet txnArray = [appCallTxn, paymentTxn];\r\n\r\n\t// Create group transaction out of previously build transactions\r\n\tlet groupID = algosdk.computeGroupID(txnArray);\r\n\tfor (let i = 0; i < 2; i++) txnArray[i].group = groupID;\r\n\r\n\t// Sign & submit the group transaction\r\n\tlet signedTxn = await myAlgoConnect.signTransaction(\r\n\t\ttxnArray.map((txn) => txn.toByte())\r\n\t);\r\n\tconsole.log(\"Signed group transaction\");\r\n\tlet tx = await algodClient\r\n\t\t.sendRawTransaction(signedTxn.map((txn) => txn.blob))\r\n\t\t.do();\r\n\r\n\t// Wait for group transaction to be confirmed\r\n\tlet confirmedTxn = await algosdk.waitForConfirmation(\r\n\t\talgodClient,\r\n\t\ttx.txId,\r\n\t\t4\r\n\t);\r\n\r\n\t// Notify about completion\r\n\tconsole.log(\r\n\t\t\"Group transaction \" +\r\n\t\t\ttx.txId +\r\n\t\t\t\" confirmed in round \" +\r\n\t\t\tconfirmedTxn[\"confirmed-round\"]\r\n\t);\r\n};\r\n\r\nexport const endAuctionAction = async (senderAddress, product) => {\r\n\tconsole.log(\"Ending Auction...\");\r\n\tlet params = await algodClient.getTransactionParams().do();\r\n\r\n\t// Build required app args as Uint8Array\r\n\tlet endArg = new TextEncoder().encode(\"end\");\r\n\tlet appArgs = [endArg];\r\n\r\n\t// Create ApplicationCallTxn\r\n\tlet appCallTxn = algosdk.makeApplicationCallTxnFromObject({\r\n\t\tfrom: senderAddress,\r\n\t\tappIndex: product.appId,\r\n\t\tonComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n\t\tsuggestedParams: params,\r\n\t\tappArgs: appArgs,\r\n\t});\r\n\r\n\t// Get transaction ID\r\n\tlet txId = appCallTxn.txID().toString();\r\n\r\n\t// Sign & submit the transaction\r\n\tlet signedTxn = await myAlgoConnect.signTransaction(appCallTxn.toByte());\r\n\tconsole.log(\"Signed transaction with txID: %s\", txId);\r\n\tawait algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n\t// Wait for group transaction to be confirmed\r\n\tlet confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n\t// Notify about completion\r\n\tconsole.log(\r\n\t\t\"Group transaction \" +\r\n\t\t\ttxId +\r\n\t\t\t\" confirmed in round \" +\r\n\t\t\tconfirmedTxn[\"confirmed-round\"]\r\n\t);\r\n};\r\n\r\n\r\n// DELETE PRODUCT: ApplicationDeleteTxn\r\nexport const deleteProductAction = async (senderAddress, index) => {\r\n\tconsole.log(\"Deleting application...\");\r\n\r\n\tlet params = await algodClient.getTransactionParams().do();\r\n\r\n\t// Create ApplicationDeleteTxn\r\n\tlet txn = algosdk.makeApplicationDeleteTxnFromObject({\r\n\t\tfrom: senderAddress,\r\n\t\tsuggestedParams: params,\r\n\t\tappIndex: index,\r\n\t});\r\n\r\n\t// Get transaction ID\r\n\tlet txId = txn.txID().toString();\r\n\r\n\t// Sign & submit the transaction\r\n\tlet signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n\tconsole.log(\"Signed transaction with txID: %s\", txId);\r\n\tawait algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n\t// Wait for transaction to be confirmed\r\n\tconst confirmedTxn = await algosdk.waitForConfirmation(\r\n\t\talgodClient,\r\n\t\ttxId,\r\n\t\t4\r\n\t);\r\n\r\n\t// Get the completed Transaction\r\n\tconsole.log(\r\n\t\t\"Transaction \" +\r\n\t\t\ttxId +\r\n\t\t\t\" confirmed in round \" +\r\n\t\t\tconfirmedTxn[\"confirmed-round\"]\r\n\t);\r\n\r\n\t// Get application id of deleted application and notify about completion\r\n\tlet transactionResponse = await algodClient\r\n\t\t.pendingTransactionInformation(txId)\r\n\t\t.do();\r\n\tlet appId = transactionResponse[\"txn\"][\"txn\"].apid;\r\n\tconsole.log(\"Deleted app-id: \", appId);\r\n};\r\n\r\n// GET LANDS: Use indexer\r\nexport const getProductsAction = async (senderAddress) => {\r\n\tconsole.log(\"Fetching lands...\");\r\n\tlet note = new TextEncoder().encode(marketplaceNote);\r\n\tlet encodedNote = Buffer.from(note).toString(\"base64\");\r\n\r\n\t// Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\r\n\tlet transactionInfo = await indexerClient\r\n\t\t.searchForTransactions()\r\n\t\t.notePrefix(encodedNote)\r\n\t\t.txType(\"appl\")\r\n\t\t.minRound(minRound)\r\n\t\t.do();\r\n\tlet products = [];\r\n\tfor (const transaction of transactionInfo.transactions) {\r\n\t\tlet appId = transaction[\"created-application-index\"];\r\n\t\tif (appId) {\r\n\t\t\t// Step 2: Get each application by application id\r\n\t\t\tlet product = await getApplication(appId, senderAddress);\r\n\t\t\tif (product) {\r\n\t\t\t\tproducts.push(product);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconsole.log(\"Lands fetched.\");\r\n\treturn products;\r\n};\r\n\r\nconst getApplication = async (appId, senderAddress) => {\r\n\ttry {\r\n\t\t// 1. Get application by appId\r\n\t\tlet response = await indexerClient\r\n\t\t\t.lookupApplications(appId)\r\n\t\t\t.includeAll(true)\r\n\t\t\t.do();\r\n\t\tif (response.application.deleted) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tlet globalState = response.application.params[\"global-state\"];\r\n\r\n\t\t// 2. Parse fields of response and return land\r\n\t\tlet seller = response.application.params.creator;\r\n\t\tlet name = \"\";\r\n\t\tlet image = \"\";\r\n\t\tlet description = \"\";\r\n\t\tlet startingPrice = 0;\r\n\t\tlet instantPrice = 0;\r\n\t\tlet currentBid = 0;\r\n\t\tlet currentBidder = \"\";\r\n\t\tlet ended = null;\r\n\t\tlet endAt = 0;\r\n\r\n\t\tconst getField = (fieldName, globalState) => {\r\n\t\t\treturn globalState.find((state) => {\r\n\t\t\t\treturn state.key === utf8ToBase64String(fieldName);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tif (getField(\"NAME\", globalState) !== undefined) {\r\n\t\t\tlet field = getField(\"NAME\", globalState).value.bytes;\r\n\t\t\tname = base64ToUTF8String(field);\r\n\t\t}\r\n\r\n\t\tif (getField(\"IMAGE\", globalState) !== undefined) {\r\n\t\t\tlet field = getField(\"IMAGE\", globalState).value.bytes;\r\n\t\t\timage = base64ToUTF8String(field);\r\n\t\t}\r\n\r\n\t\tif (getField(\"DESCRIPTION\", globalState) !== undefined) {\r\n\t\t\tlet field = getField(\"DESCRIPTION\", globalState).value.bytes;\r\n\t\t\tdescription = base64ToUTF8String(field);\r\n\t\t}\r\n\r\n\t\tif (getField(\"STARTINGPRICE\", globalState) !== undefined) {\r\n\t\t\tstartingPrice = getField(\"STARTINGPRICE\", globalState).value.uint;\r\n\t\t}\r\n\t\tif (getField(\"INSTANTPRICE\", globalState) !== undefined) {\r\n\t\t\tinstantPrice = getField(\"INSTANTPRICE\", globalState).value.uint;\r\n\t\t}\r\n\t\tif (getField(\"CURRENTBID\", globalState) !== undefined) {\r\n\t\t\tcurrentBid = getField(\"CURRENTBID\", globalState).value.uint;\r\n\t\t}\r\n\t\tif (getField(\"CURRENTBIDDER\", globalState) !== undefined) {\r\n\t\t\tlet field = getField(\"CURRENTBIDDER\", globalState).value.bytes;\r\n\t\t\tcurrentBidder = algosdk.encodeAddress(Base64.toUint8Array(field));\r\n\t\t}\r\n\t\tif (getField(\"ENDED\", globalState) !== undefined) {\r\n\t\t\tended =\r\n\t\t\t\tgetField(\"ENDED\", globalState).value.uint > 0 ? true : false;\r\n\t\t}\r\n\t\tif (getField(\"ENDAT\", globalState) !== undefined) {\r\n\t\t\tendAt = getField(\"ENDAT\", globalState).value.uint;\r\n\t\t}\r\n\r\n\t\treturn new Product(\r\n\t\t\tname,\r\n\t\t\timage,\r\n\t\t\tdescription,\r\n\t\t\tstartingPrice,\r\n\t\t\tinstantPrice,\r\n\t\t\tcurrentBid,\r\n\t\t\tcurrentBidder,\r\n\t\t\tended,\r\n\t\t\tendAt,\r\n\t\t\tappId,\r\n\t\t\tseller\r\n\t\t);\r\n\t} catch (err) {\r\n\t\treturn null;\r\n\t}\r\n};\r\n","import algosdk from \"algosdk\";\r\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\r\n\r\nconst config = {\r\n    algodToken: \"\",\r\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\r\n    algodPort: \"\",\r\n    indexerToken: \"\",\r\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\r\n    indexerPort: \"\",\r\n}\r\n\r\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\r\n\r\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\r\n\r\nexport const myAlgoConnect = new MyAlgoConnect();\r\n\r\nexport const minRound = 25570850;\r\n\r\n\r\nexport const marketplaceNote = \"aucspace:uv1\"\r\n\r\n// Maximum local storage allocation, immutable\r\nexport const numLocalInts = 0; \r\nexport const numLocalBytes = 0;\r\n// Maximum global storage allocation, immutable\r\nexport const numGlobalInts = 5; // Global variables stored as Int: startingPrice, instantPrice, currentBid, ended, endAt\r\nexport const numGlobalBytes = 4; // Global variables stored as Bytes: name, description, image, currentBidder\r\n\r\nexport const ALGORAND_DECIMALS = 6;\r\n"],"sourceRoot":""}